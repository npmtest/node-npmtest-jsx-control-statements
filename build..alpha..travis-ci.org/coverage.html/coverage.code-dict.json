{"/home/travis/build/npmtest/node-npmtest-jsx-control-statements/test.js":"/* istanbul instrument in package npmtest_jsx_control_statements */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/lib.npmtest_jsx_control_statements.js":"/* istanbul instrument in package npmtest_jsx_control_statements */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsx_control_statements = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsx_control_statements = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsx-control-statements && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsx_control_statements */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsx_control_statements\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsx_control_statements.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsx_control_statements.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsx_control_statements.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsx_control_statements.__dirname + '/lib.npmtest_jsx_control_statements.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/index.js":"var transformFor = require(\"./forStatement\");\nvar transformIf = require(\"./ifStatement\");\nvar transformChoose = require(\"./chooseStatement\");\n\n\nmodule.exports = function jcsPlugin(babel) {\n  var nodeHandlers = {\n    For: transformFor(babel),\n    If: transformIf(babel),\n    Choose: transformChoose(babel)\n  };\n\n  var visitor = {\n    JSXElement: function(path) {\n      var nodeName = path.node.openingElement.name.name;\n      var handler = nodeHandlers[nodeName];\n\n      if (handler) {\n        path.replaceWith(handler(path.node, path.hub.file));\n      }\n    }\n  };\n\n  return {\n    inherits: require(\"babel-plugin-syntax-jsx\"),\n    visitor: visitor\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/forStatement.js":"var astUtil = require(\"./util/ast\");\nvar errorUtil = require(\"./util/error\");\n\nvar ELEMENTS = {\n  FOR: \"For\"\n};\nvar ATTRIBUTES = {\n  EACH: \"each\",\n  OF: \"of\",\n  INDEX: \"index\"\n};\n\nfunction addMapParam(types, params, attributes, attributeKey) {\n  var attribute = attributes[attributeKey];\n  if (attribute && attribute.value) {\n    params.push(types.Identifier(attribute.value.value));\n  }\n  else {\n    params.push(types.Identifier(attributeKey));\n  }\n}\n\nfunction checkForString(attributes, name, errorInfos) {\n  if (attributes[name] && !astUtil.isStringLiteral(attributes[name])) {\n    errorUtil.throwNotStringType(name, errorInfos);\n  }\n}\n\nfunction checkForExpression(attributes, name, errorInfos) {\n  if (attributes[name] && !astUtil.isExpressionContainer(attributes[name])) {\n    errorUtil.throwNotExpressionType(name, errorInfos);\n  }\n}\n\nmodule.exports = function(babel) {\n  var types = babel.types;\n\n  return function(node, file) {\n    var mapParams = [];\n    var errorInfos = { node: node, file: file, element: ELEMENTS.FOR };\n    var attributes = astUtil.getAttributeMap(node);\n    var children = astUtil.getChildren(types, node);\n    var returnExpression = astUtil.getSanitizedExpressionForContent(types, children);\n\n    // required attribute\n    if (!attributes[ATTRIBUTES.OF]) {\n      errorUtil.throwNoAttribute(ATTRIBUTES.OF, errorInfos);\n    }\n    // check for correct data types, as far as possible\n    checkForExpression(attributes, ATTRIBUTES.OF, errorInfos);\n    checkForString(attributes, ATTRIBUTES.EACH, errorInfos);\n    checkForString(attributes, ATTRIBUTES.INDEX, errorInfos);\n\n    // simply return without any child nodes\n    if (!children.length) {\n      return returnExpression;\n    }\n\n    addMapParam(types, mapParams, attributes, ATTRIBUTES.EACH);\n    addMapParam(types, mapParams, attributes, ATTRIBUTES.INDEX);\n\n    return types.callExpression(\n      types.memberExpression(\n        attributes[ATTRIBUTES.OF].value.expression,\n        types.identifier(\"map\")\n      ),\n      [\n        types.functionExpression(\n          null,\n          mapParams,\n          types.blockStatement([\n            types.returnStatement(returnExpression)\n          ])\n        ),\n        types.identifier(\"this\")\n      ]\n    );\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/util/ast.js":"var TYPES = {\n  ELEMENT: \"JSXElement\",\n  EXPRESSION_CONTAINER: \"JSXExpressionContainer\",\n  STRING_LITERAL: \"StringLiteral\"\n};\n\nfunction getTagName(node) {\n  return node.openingElement.name.name;\n}\n\n/**\n * Test if this is a custom JSX element with the given name.\n *\n * @param {object} node - Current node to test\n * @param {string} tagName - Name of element\n * @returns {boolean} whether the searched for element was found\n */\nexports.isTag = function(node, tagName) {\n  return node.type === TYPES.ELEMENT && getTagName(node) === tagName;\n};\n\n\n/**\n * Tests whether this is an JSXExpressionContainer and returns it if true.\n *\n * @param {object} attribute - The attribute the value of which is tested\n * @returns {boolean}\n */\nexports.isExpressionContainer = function(attribute) {\n  return attribute && attribute.value.type === TYPES.EXPRESSION_CONTAINER;\n};\n\n/**\n * Get expression from given attribute.\n *\n * @param {JSXAttribute} attribute\n * @returns {Expression}\n */\nexports.getExpression = function(attribute) {\n  return attribute.value.expression;\n};\n\n/**\n * Tests whether this is an StringLiteral and returns it if true.\n *\n * @param {object} attribute - The attribute the value of which is tested\n * @returns {boolean}\n */\nexports.isStringLiteral = function(attribute) {\n  return attribute && attribute.value.type === TYPES.STRING_LITERAL;\n};\n\n/**\n * Get all attributes from given element.\n *\n * @param {JSXElement} node - Current node from which attributes are gathered\n * @returns {object} Map of all attributes with their name as key\n */\nexports.getAttributeMap = function(node) {\n  return node.openingElement.attributes.reduce(function(result, attr) {\n    result[attr.name.name] = attr;\n    return result;\n  }, {});\n};\n\n/**\n * Get the string value of a node's key attribute if present.\n *\n * @param {JSXElement} node - Node to get attributes from\n * @returns {object} The string value of the key attribute of this node if present, otherwise undefined.\n */\nexports.getKey = function(node) {\n  var key = exports.getAttributeMap(node).key;\n  return key ? key.value.value : undefined;\n};\n\n/**\n * Get all children from given element. Normalizes JSXText and JSXExpressionContainer to expressions.\n *\n * @param {object} babelTypes - Babel lib\n * @param {JSXElement} node - Current node from which children are gathered\n * @returns {array} List of all children\n */\nexports.getChildren = function(babelTypes, node) {\n  return babelTypes.react.buildChildren(node);\n};\n\n/**\n * Adds attribute \"key\" to given node, if not already preesent.\n *\n * @param {object} babelTypes - Babel lib\n * @param {JSXElement} node - Current node to which the new attribute is added\n * @param {string} keyValue - Value of the key\n */\nvar addKeyAttribute = exports.addKeyAttribute = function(babelTypes, node, keyValue) {\n  var keyFound = false;\n\n  node.openingElement.attributes.forEach(function(attrib) {\n    if (babelTypes.isJSXAttribute(attrib) && attrib.name.name === \"key\") {\n      keyFound = true;\n      return false;\n    }\n  });\n\n  if (!keyFound) {\n    var keyAttrib = babelTypes.jSXAttribute(babelTypes.jSXIdentifier(\"key\"), babelTypes.stringLiteral(\"\" + keyValue));\n    node.openingElement.attributes.push(keyAttrib);\n  }\n};\n\n/**\n * Return either a NullLiteral (if no content is available) or\n * the single expression (if there is only one) or an ArrayExpression.\n *\n * @param babelTypes - Babel lib\n * @param blocks - the content blocks\n * @param keyPrefix - a prefix to use when automatically generating keys\n * @returns {NullLiteral|Expression|ArrayExpression}\n */\nexports.getSanitizedExpressionForContent = function(babelTypes, blocks, keyPrefix) {\n  if (!blocks.length) {\n    return babelTypes.NullLiteral();\n  }\n  else if (blocks.length === 1) {\n    var firstBlock = blocks[0];\n\n    if (keyPrefix && firstBlock.openingElement) {\n      addKeyAttribute(babelTypes, firstBlock, keyPrefix);\n    }\n\n    return firstBlock;\n  }\n\n  for (var i = 0; i < blocks.length; i++) {\n    var thisBlock = blocks[i];\n    if (babelTypes.isJSXElement(thisBlock)) {\n      var key = keyPrefix ? keyPrefix + \"-\" + i : i;\n      addKeyAttribute(babelTypes, thisBlock, key);\n    }\n  }\n\n  return babelTypes.arrayExpression(blocks);\n};\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/util/error.js":"// http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format#answer-4673436\nfunction formatString(format) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return format.replace(/{(\\d+)}/g, function(match, number) {\n    return typeof args[number] !== \"undefined\" ? args[number] : match;\n  });\n}\n\nfunction throwError(errorMsg, infos) {\n  throw new Error(\n    [\n      exports.renderErrorMessage(errorMsg, infos),\n      \" at \",\n      infos.file.opts.filename,\n      \": \",\n      infos.node.loc.start.line,\n      \",\",\n      infos.node.loc.start.column\n    ].join(\"\")\n  );\n}\n\nvar ERRORS = exports.ERRORS = {\n  NO_ATTRIBUTE: \"Attribute \\\"{0}\\\" is required for <{1}>, but missing!\",\n  NOT_EXPRESSION_TYPE: \"Attribute \\\"{0}\\\" of <{1}> tag must be an expression, e.g. \\\"{0}={ ... }\\\"\",\n  NOT_STRING_TYPE: \"Attribute \\\"{0}\\\" of <{1}> tag must be of type String, e.g. {0}=\\\"...\\\"\",\n  CHOOSE_WITHOUT_WHEN: \"<Choose> statement requires at least one <When> element!\",\n  CHOOSE_OTHERWISE_NOT_LAST: \"<Otherwise> must be the last element within a <Choose> statement!\",\n  CHOOSE_WITH_MULTIPLE_OTHERWISE: \"<Choose> statement allows only for one <Otherwise> block!\",\n  CHOOSE_WITH_WRONG_CHILDREN: \"Only <Otherwise> and <When> are allowed child elements for <Choose>!\"\n};\n\nexports.renderErrorMessage = function(errorMsg, infos) {\n  var args = [];\n  if (infos) {\n    args.push(infos.attribute);\n    args.push(infos.element);\n  }\n  return formatString(errorMsg, args);\n};\n\nexports.throwNoAttribute = function(attributeName, infos) {\n  infos.attribute = attributeName;\n  throwError(ERRORS.NO_ATTRIBUTE, infos);\n};\n\nexports.throwNotExpressionType = function(attributeName, infos) {\n  infos.attribute = attributeName;\n  throwError(ERRORS.NOT_EXPRESSION_TYPE, infos);\n};\n\nexports.throwNotStringType = function(attributeName, infos) {\n  infos.attribute = attributeName;\n  throwError(ERRORS.NOT_STRING_TYPE, infos);\n};\n\nexports.throwChooseWithoutWhen = function(infos) {\n  throwError(ERRORS.CHOOSE_WITHOUT_WHEN, infos);\n};\n\nexports.throwChooseOtherwiseNotLast = function(infos) {\n  throwError(ERRORS.CHOOSE_OTHERWISE_NOT_LAST, infos);\n};\n\nexports.throwChooseWithMultipleOtherwise = function(infos) {\n  throwError(ERRORS.CHOOSE_WITH_MULTIPLE_OTHERWISE, infos);\n};\n\nexports.throwChooseWithWrongChildren = function(infos) {\n  throwError(ERRORS.CHOOSE_WITH_WRONG_CHILDREN, infos);\n};\n\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/ifStatement.js":"var astUtil = require(\"./util/ast\");\nvar conditionalUtil = require(\"./util/conditional\");\n\nvar ELEMENTS = {\n  IF: \"If\",\n  ELSE: \"Else\"\n};\n\nfunction getBlocks(nodes) {\n  var result = {\n    ifBlock: [],\n    elseBlock: []\n  };\n  var currentBlock = result.ifBlock;\n\n  nodes.forEach(function(node) {\n    if (astUtil.isTag(node, ELEMENTS.ELSE)) {\n      currentBlock = result.elseBlock;\n    }\n    else {\n      currentBlock.push(node);\n    }\n  });\n\n  return result;\n}\n\nmodule.exports = function ifStatement(babel) {\n  var types = babel.types;\n\n  return function(node, file) {\n    var ifBlock;\n    var elseBlock;\n    var errorInfos = {node: node, file: file, element: ELEMENTS.IF};\n    var condition = conditionalUtil.getConditionExpression(node, errorInfos);\n    var key = astUtil.getKey(node);\n    var children = astUtil.getChildren(types, node);\n    var blocks = getBlocks(children);\n\n    ifBlock = astUtil.getSanitizedExpressionForContent(types, blocks.ifBlock, key);\n    elseBlock = astUtil.getSanitizedExpressionForContent(types, blocks.elseBlock, key);\n\n    return types.ConditionalExpression(condition, ifBlock, elseBlock);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/util/conditional.js":"var astUtil = require(\"./ast\");\nvar errorUtil = require(\"./error\");\n\n\nvar ATTRIBUTES = {\n  CONDITION: \"condition\"\n};\n\nexports.getConditionExpression = function(node, errorInfos) {\n  var condition = astUtil.getAttributeMap(node)[ATTRIBUTES.CONDITION];\n\n  if (!condition) {\n    errorUtil.throwNoAttribute(ATTRIBUTES.CONDITION, errorInfos);\n  }\n  if (!astUtil.isExpressionContainer(condition)) {\n    errorUtil.throwNotExpressionType(ATTRIBUTES.CONDITION, errorInfos);\n  }\n\n  return astUtil.getExpression(condition);\n};\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/src/chooseStatement.js":"var astUtil = require(\"./util/ast\");\nvar conditionalUtil = require(\"./util/conditional\");\nvar errorUtil = require(\"./util/error\");\n\nvar ELEMENTS = {\n  CHOOSE: \"Choose\",\n  WHEN: \"When\",\n  OTHERWISE: \"Otherwise\"\n};\n\n\nfunction getBlocks(types, children, errorInfos, key) {\n  var childNodes;\n  var startResult = {};\n  startResult[ELEMENTS.WHEN] = [];\n\n  var result = children.reduceRight(function(resultSoFar, child) {\n    if (astUtil.isTag(child, ELEMENTS.OTHERWISE)) {\n      childNodes = astUtil.getChildren(types, child);\n      errorInfos.element = ELEMENTS.OTHERWISE;\n      errorInfos.node = child;\n\n      if (resultSoFar[ELEMENTS.WHEN].length) {\n        errorUtil.throwChooseOtherwiseNotLast(errorInfos);\n      }\n      else if (resultSoFar[ELEMENTS.OTHERWISE]) {\n        errorUtil.throwChooseWithMultipleOtherwise(errorInfos);\n      }\n\n      resultSoFar[ELEMENTS.OTHERWISE] = astUtil.getSanitizedExpressionForContent(types, childNodes, key);\n    }\n    else if (astUtil.isTag(child, ELEMENTS.WHEN)) {\n      childNodes = astUtil.getChildren(types, child);\n      errorInfos.element = ELEMENTS.WHEN;\n      errorInfos.node = child;\n\n      resultSoFar[ELEMENTS.WHEN].push({\n        condition: conditionalUtil.getConditionExpression(child, errorInfos),\n        children: astUtil.getSanitizedExpressionForContent(types, childNodes, key)\n      });\n    }\n    else {\n      errorInfos.element = ELEMENTS.CHOOSE;\n      errorInfos.node = child;\n      errorUtil.throwChooseWithWrongChildren(errorInfos);\n    }\n\n    return resultSoFar;\n  }, startResult);\n\n  if (!result[ELEMENTS.OTHERWISE]) {\n    result[ELEMENTS.OTHERWISE] = types.NullLiteral();\n  }\n\n  return result;\n}\n\nmodule.exports = function(babel) {\n  var types = babel.types;\n\n  return function(node, file) {\n    var errorInfos = { node: node, file: file, element: ELEMENTS.CHOOSE };\n    var children = astUtil.getChildren(types, node);\n    var key = astUtil.getKey(node);\n    var blocks = getBlocks(types, children, errorInfos, key);\n    var ternaryExpression = blocks[ELEMENTS.OTHERWISE];\n\n    if (!blocks[ELEMENTS.WHEN].length) {\n      errorInfos.node = node;\n      errorUtil.throwChooseWithoutWhen(errorInfos);\n    }\n\n    blocks[ELEMENTS.WHEN].forEach(function(whenBlock) {\n      ternaryExpression = types.ConditionalExpression(whenBlock.condition, whenBlock.children, ternaryExpression);\n    });\n\n    return ternaryExpression;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-jsx-control-statements/node_modules/jsx-control-statements/jsx-control-statements.flow.js":"// @flow\n\ndeclare var If: ReactClass<{condition: boolean}>;\ndeclare var For: ReactClass<{each: string, index: string, of: Array<any>}>;\ndeclare var Choose: ReactClass<{}>;\ndeclare var When: ReactClass<{condition: boolean}>;\ndeclare var Otherwise: ReactClass<{}>;\n"}